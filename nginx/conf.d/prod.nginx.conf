# don't send the nginx version number in error pages and Server header
server_tokens off;

ssl_certificate /etc/nginx/configurations/certs/server.pem;
ssl_certificate_key /etc/nginx/configurations/certs/server.key;

map $http_user_agent $is_a_bot {
    default                                 0;

    "~Onebox"                               1;

    "~W3C_Validator"                        1;
    "~baiduspider"                          1;
    "~bingbot"                              1;
    "~embedly"                              1;
    "~facebookexternalhit"                  1;
    "~linkedinbot"                          1;
    "~outbrain"                             1;
    "~pinterest"                            1;
    "~quora link preview"                   1;
    "~rogerbot"                             1;
    "~showyoubot"                           1;
    "~slackbot"                             1;
    "~twitterbot"                           1;
    "~vkShare"                              1;
}

# We can't cache based on mime type, we have to cache based on
# endpoint for purposes of delivering the appropriate content based
# on user-agent. These numbers should be increased once the site stabalizes.
map $uri $cache_control {
    default                         "private, max-age=86400";
    "~\.(?:manifest|appcache)|sw-generated.js"  "max-age=0";
    "~\.(?:jpg|webm|woff|woff2|png)"  "public, s-maxage=31104000, max-age=31104000";
    "~/(?:api|localization|elements|files)/"                  "public, s-maxage=604800, max-age=86400";
}

add_header Cache-Control $cache_control;

uwsgi_cache_path /etc/nginx/cache keys_zone=SC_CACHE:30m levels=1:2 inactive=30d max_size=8g;

server {
    # If no server block matches return a 404
    # Without this block, Nginx uses the first server block regardless of server_name
    return 404;
}

server {
    listen 80;
    listen 443 ssl;
    server_name www.suttacentral.net www.suttacentral.com www.suttacentral.org suttacentral.com suttacentral.org;
    return 301 $scheme://suttacentral.net$request_uri;
}

server {

    if (-f /opt/sc/static/maintenance_on.html) {
        return 503;
    }

    include "/etc/nginx/configurations/sc.nginx.conf";
    
    location /api/ {
        uwsgi_cache SC_CACHE;
        uwsgi_cache_valid 30d;
        uwsgi_cache_key $uri$is_args$args;
        uwsgi_cache_lock on;
        rewrite ^/api/(.*)$ /$1 break;
        include uwsgi_params;
        uwsgi_pass unix:/opt/sc/sockets/uwsgi.sock;
    }

    set $serve_dir /opt/sc/static/build;
    # set $prefetch_link "</main.js>; rel=preload; as=script,</node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js>; rel=preload; as=script";

    location ~* (\.(?:manifest|appcache|html?|xml|json)|service-worker.js)$ {
      root $serve_dir;
    }

    location ~* \.(ico|css|js|gif|svg|webp|woff2|jpe?g|png|avif)$ {
        access_log off;
        root $serve_dir;
    }

    location / {
        # HTTP2 push header for Cloudflare
        # https://blog.cloudflare.com/http-2-server-push-with-multiple-assets-per-link-header/
        # TODO: Prefetching disabled, files are not used because script type=module needs special attribute (crossorigin)
        # https://stackoverflow.com/a/46656731/1891329
        # Should be reverted once webpack config is reworked, thus only commenting it out
        # add_header Link $prefetch_link;

        # config to don't allow the browser to render the page inside an frame or iframe
        # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        add_header X-Frame-Options SAMEORIGIN;

        # Avoid clickjacking
        add_header X-Content-Type-Options nosniff;

        # Disable content-type sniffing on some browsers
        add_header X-Frame-Options SAMEORIGIN;

        # Enable the Cross-site scripting (XSS) filter
        add_header X-XSS-Protection "1; mode=block";

        # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
        # you can tell the browser that it can only download content from the domains you explicitly allow
        # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
        # https://www.owasp.org/index.php/Content_Security_Policy
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://js.stripe.com https://static.cloudflareinsights.com https://hcaptcha.com https://*.hcaptcha.com; img-src https://i.creativecommons.org https://licensebuttons.net 'self' data: https://legacy.suttacentral.net https://suttacentral.net; connect-src 'self' https://api.stripe.com https://js.stripe.com https://cloudflareinsights.com https://hcaptcha.com https://*.hcaptcha.com https://raw.githubusercontent.com/suttacentral/editions/main/last_run_date https://*.algolia.net https://*.algolianet.com https://*.algolia.io; style-src 'self' https://hcaptcha.com https://*.hcaptcha.com 'unsafe-inline'; font-src 'self'; frame-src about: https://www.google.com https://js.stripe.com https://hcaptcha.com https://*.hcaptcha.com; object-src 'none'; media-src 'self' https://ia601508.us.archive.org;";

        # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
        # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
        # also https://hstspreload.org/
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

        add_header Referrer-Policy "no-referrer-when-downgrade";

        add_header Permissions-Policy "camera=(), usb=()";

        if ($is_a_bot = 1){
            rewrite /(.*) /render/https://suttacentral.net/$1?wc-inject-shadydom=true break;
            proxy_pass http://rendertron.suttacentral.net;
        }

        alias $serve_dir;

        try_files $uri $uri/index.html /index.html;
    }
}
